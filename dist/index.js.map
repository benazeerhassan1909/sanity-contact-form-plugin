{"version":3,"file":"index.js","sources":["../src/schemas/contactForm.ts","../src/schemas/formGeneralSettings.ts","../src/components/ContactForm.tsx","../src/index.ts"],"sourcesContent":["// schemas/form.js\nexport const contactFormSchema = {\n  name: 'contactForm',\n  type: 'document',\n  title: 'Forms',\n  fields: [\n    {\n      name: 'title',\n      type: 'string',\n      title: 'Form Title',\n    },\n    {\n      name: 'showtitle',\n      type: 'boolean',\n      title: 'Show Title',\n      initialValue: false,\n    },\n    {\n      name: 'id',\n      type: 'string',\n      title: 'ID',\n      options: {\n        source: 'title',\n      },\n      validation: (Rule: {required: () => void}) => Rule.required(),\n    },\n    {\n      name: 'class',\n      type: 'string',\n      title: 'Class',\n    },\n    {\n      name: 'fields',\n      type: 'array',\n      title: 'Form Fields',\n      of: [\n        {\n          type: 'object',\n          title: 'Field',\n          fields: [\n            {\n              name: 'label',\n              type: 'string',\n              title: 'Label',\n              validation: (Rule: {required: () => void}) => Rule.required(),\n            },\n            {\n              name: 'type',\n              type: 'string',\n              title: 'Field Type',\n              options: {\n                list: [\n                  {title: 'Text', value: 'text'},\n                  {title: 'Email', value: 'email'},\n                  {title: 'Tel', value: 'tel'},\n                  {title: 'Textarea', value: 'textarea'},\n                  {title: 'URL', value: 'url'},\n                  {title: 'File Upload', value: 'file'},\n                  {title: 'Checkbox', value: 'checkbox'},\n                  {title: 'Select Dropdown', value: 'select'},\n                  {title: 'Radio Buttons', value: 'radio'},\n                ],\n                layout: 'dropdown',\n              },\n              initialValue: 'text',\n            },\n            {\n              name: 'showPlaceholder',\n              type: 'boolean',\n              title: 'Use Label as Placeholder?',\n              initialValue: true,\n              hidden: ({parent}: {parent: {type?: string}}) =>\n                parent?.type === 'checkbox' ||\n                parent?.type === 'radio' ||\n                parent?.type === 'file' ||\n                parent?.type === 'select',\n            },\n            {\n              name: 'placeholder',\n              type: 'string',\n              title: 'Placeholder Text',\n              hidden: ({parent}: {parent: {showPlaceholder?: boolean}}) => parent?.showPlaceholder,\n            },\n            {\n              name: 'name',\n              type: 'string',\n              title: 'Field Name',\n              description: 'Unique field name (e.g., fullName, email, phone)',\n              validation: (Rule: {required: () => void}) => Rule.required(),\n            },\n            {\n              name: 'selectOptions',\n              type: 'array',\n              title: 'Dropdown Options',\n              of: [{type: 'string'}],\n              description: 'Add all available options for selection',\n              hidden: ({parent}: {parent?: {type?: string}}) => parent?.type !== 'select',\n              validation: (Rule: {\n                custom: (\n                  callback: (\n                    options: string[] | undefined,\n                    context: {parent?: {type?: string}},\n                  ) => true | string,\n                ) => void\n              }) =>\n                Rule.custom(\n                  (options: string[] | undefined, context: {parent?: {type?: string}}) => {\n                    if (context.parent?.type === 'select' && (!options || options.length === 0)) {\n                      return 'At least one option is required for select fields'\n                    }\n                    return true\n                  },\n                ),\n            },\n            {\n              name: 'radioOptions',\n              type: 'array',\n              title: 'Radio Options',\n              of: [{type: 'string'}],\n              description: 'Add all available options for selection',\n              hidden: ({parent}: {parent?: {type?: string}}) => parent?.type !== 'radio',\n              validation: (Rule: {\n                custom: (\n                  callback: (\n                    options: string[] | undefined,\n                    context: {parent?: {type?: string}},\n                  ) => true | string,\n                ) => void\n              }) =>\n                Rule.custom(\n                  (options: string[] | undefined, context: {parent?: {type?: string}}) => {\n                    if (context.parent?.type === 'radio' && (!options || options.length === 0)) {\n                      return 'At least one option is required for radio fields'\n                    }\n                    return true\n                  },\n                ),\n            },\n            {\n              name: 'checkboxOptions',\n              type: 'array',\n              title: 'Checkbox Options',\n              of: [{type: 'string'}],\n              description: 'Add all available options for selection',\n              hidden: ({parent}: {parent?: {type?: string}}) => parent?.type !== 'checkbox',\n              validation: (Rule: {\n                custom: (\n                  callback: (\n                    options: string[] | undefined,\n                    context: {parent?: {type?: string}},\n                  ) => true | string,\n                ) => void\n              }) =>\n                Rule.custom(\n                  (options: string[] | undefined, context: {parent?: {type?: string}}) => {\n                    if (context.parent?.type === 'checkbox' && (!options || options.length === 0)) {\n                      return 'At least one option is required for checkbox fields'\n                    }\n                    return true\n                  },\n                ),\n            },\n            {\n              name: 'helpText',\n              type: 'string',\n              title: 'Help Text',\n            },\n            {\n              name: 'note',\n              type: 'string',\n              title: 'Note',\n            },\n            {\n              name: 'isRequired',\n              type: 'boolean',\n              title: 'Required Field?',\n              initialValue: true,\n            },\n          ],\n        },\n      ],\n      validation: (Rule: {required: () => void}) => Rule.required(),\n    },\n    {\n      name: 'submitButtonText',\n      type: 'string',\n      title: 'Submit Button Text',\n      initialValue: 'Apply Now',\n    },\n  ],\n}\n","import {defineType} from 'sanity'\n\nexport const formGeneralSettings = defineType({\n  name: 'formGeneralSettings',\n  title: 'Form: General Settings',\n  type: 'document',\n  fields: [\n    {\n      name: 'adminEmail',\n      title: 'Admin Email',\n      type: 'string',\n      description: 'The email address where submissions should be sent.',\n      validation: (Rule) => Rule.required().email(),\n    },\n    // Gmail smtp settings\n    {\n      name: 'smtpUsername',\n      title: 'Gmail SMTP Username',\n      type: 'string',\n      description: 'For Gmail, use full address',\n      validation: (Rule) => Rule.required().email(),\n    },\n    {\n      name: 'smtpPassword',\n      title: 'Gmail SMTP Password',\n      type: 'string',\n      description: 'For Gmail, use an App Password',\n      validation: (Rule) => Rule.required(),\n    },\n    {\n      name: 'successMessage',\n      title: 'Success Message',\n      type: 'text',\n      rows: 3,\n      validation: (Rule) => Rule.required(),\n      description: 'Message displayed to the user after successful submission.',\n      initialValue: 'Thank you for your submission! We will get back to you soon.',\n    },\n    {\n      name: 'confirmationSubject',\n      title: 'Email Subject',\n      type: 'string',\n      description: 'Subject line for the confirmation email sent to the admin.',\n      initialValue: 'New Submission',\n      validation: (Rule) => Rule.required(),\n    },\n    {\n      name: 'confirmationMessage',\n      title: 'Email Message',\n      type: 'text',\n      rows: 4,\n      description: 'Message body for the confirmation email sent to the admin.',\n      initialValue:\n        'Thank you for your submission! We have received your message and will get back to you shortly.',\n    },\n    {\n      name: 'recaptchaEnabled',\n      title: 'Enable reCAPTCHA',\n      type: 'boolean',\n      description: 'Enable Google reCAPTCHA for spam protection.',\n      initialValue: false,\n    },\n    {\n      name: 'recaptchaSiteKey',\n      title: 'reCAPTCHA Site Key',\n      type: 'string',\n      description: 'Google reCAPTCHA site key for spam protection.',\n      hidden: ({document}) => !document?.recaptchaEnabled,\n      validation: (Rule) =>\n        Rule.custom((field, context) => {\n          // Get the current document from context\n          const document = context.document\n\n          // Only validate if recaptchaEnabled is true\n          if (document?.recaptchaEnabled && !field) {\n            return 'Site key is required when reCAPTCHA is enabled'\n          }\n\n          return true\n        }),\n    },\n    {\n      name: 'recaptchaSecretKey',\n      title: 'reCAPTCHA Secret Key',\n      type: 'string',\n      description: 'Google reCAPTCHA secret key for server-side validation.',\n      hidden: ({document}) => !document?.recaptchaEnabled,\n      validation: (Rule) =>\n        Rule.custom((field, context) => {\n          // Get the current document from context\n          const document = context.document\n\n          // Only validate if recaptchaEnabled is true\n          if (document?.recaptchaEnabled && !field) {\n            return 'Secret key is required when reCAPTCHA is enabled'\n          }\n\n          return true\n        }),\n    },\n  ],\n  preview: {\n    prepare() {\n      return {\n        title: 'Form: General Settings',\n      }\n    },\n  },\n})\n","'use client'\nimport React, {useRef, useState} from 'react'\nimport ReCAPTCHA from 'react-google-recaptcha'\n\ninterface Field {\n  label: string\n  name: string\n  type: string\n  placeholder?: string\n  isRequired?: boolean\n  selectOptions?: string[]\n  helpText?: string\n  note?: string\n  showPlaceholder?: boolean\n  radioOptions?: string[]\n  checkboxOptions?: string[]\n}\n\ninterface ContactFormProps {\n  formData: {\n    title?: string\n    showtitle?: boolean\n    fields: Field[]\n    submitButtonText?: string\n    id?: string\n    class?: string\n    settings: {\n      adminEmail: string\n      successMessage: string\n      confirmationSubject: string\n      confirmationMessage: string\n      recaptchaEnabled: boolean\n      recaptchaSiteKey: string\n      recaptchaSecretKey: string\n    }\n  }\n}\n\nexport const ContactForm: React.FC<ContactFormProps> = ({formData}) => {\n  const [formState, setFormState] = useState<Record<string, string | boolean | string[] | File>>({})\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [submitStatus, setSubmitStatus] = useState<{success?: boolean; message?: string}>({})\n  const recaptchaRef = useRef<ReCAPTCHA>(null)\n\n  const onReCAPTCHAChange = (captchaCode: string | null) => {\n    if (!captchaCode) return\n    setFormState((prev) => ({...prev, recaptcha: captchaCode}))\n  }\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,\n  ) => {\n    const {name, value, checked, options} = e.target as HTMLInputElement & HTMLSelectElement\n    let finalValue: string | boolean | string[]\n    const inputType = (e.target as HTMLInputElement).type\n    if (inputType === 'checkbox') {\n      if (Array.isArray(formState[name])) {\n        finalValue = checked\n          ? [...(formState[name] as string[]), value]\n          : (formState[name] as string[]).filter((v) => v !== value)\n      } else {\n        finalValue = checked ? value : ''\n      }\n    } else if (inputType === 'select-multiple') {\n      finalValue = Array.from(options)\n        .filter((opt) => opt.selected)\n        .map((opt) => opt.value)\n    } else if (inputType === 'radio') {\n      finalValue = value\n    } else {\n      finalValue = value\n    }\n    setFormState((prev) => ({...prev, [name]: finalValue}))\n  }\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {}\n    if (!formData?.fields) return false\n    let isValid = true\n    formData.fields.forEach((field) => {\n      const fieldValue = formState[field.name]\n      const isEmpty =\n        fieldValue === undefined ||\n        fieldValue === null ||\n        (typeof fieldValue === 'string' && fieldValue.trim() === '') ||\n        (Array.isArray(fieldValue) && fieldValue.length === 0)\n      if (field.isRequired) {\n        if (field.type === 'file') {\n          if (!fieldValue || !(fieldValue instanceof File)) {\n            errors[field.name] = 'Please upload a file'\n            isValid = false\n          }\n        } else if (isEmpty) {\n          errors[field.name] = `Please enter your ${field.label?.toLowerCase()}.`\n          isValid = false\n        }\n        if (field.type === 'checkbox' && !fieldValue) {\n          errors[field.name] = 'Please check the box'\n          isValid = false\n        }\n        if (field.type === 'radio' && !fieldValue) {\n          errors[field.name] = 'Please select an option'\n          isValid = false\n        }\n      }\n      if (!isEmpty && fieldValue) {\n        if (field.type === 'email' && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(fieldValue.toString())) {\n          errors[field.name] = 'Please enter a valid email address'\n          isValid = false\n        } else if (field.type === 'url' && !/^https?:\\/\\/.+\\..+/.test(fieldValue.toString())) {\n          errors[field.name] = 'Please enter a valid URL'\n          isValid = false\n        } else if (field.type === 'tel' && !/^[\\d\\s+\\-()]{10,}$/.test(fieldValue.toString())) {\n          errors[field.name] = 'Please enter a valid phone number'\n          isValid = false\n        }\n      }\n    })\n    setFormErrors(errors)\n    return isValid\n  }\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {name, files} = e.target\n    const file = files?.[0]\n    setFormState((prev) => ({\n      ...prev,\n      [name]: file || '',\n    }))\n    setFormErrors((prev) => ({...prev, [name]: ''}))\n  }\n\n  const resetForm = () => {\n    const newState: Record<string, string | boolean | string[] | File> = {}\n    formData.fields.forEach((field) => {\n      if (field.type === 'checkbox') {\n        newState[field.name] =\n          field.checkboxOptions?.length && field.checkboxOptions.length > 1 ? [] : false\n      } else if (field.type === 'select') {\n        newState[field.name] = []\n      } else if (field.type === 'file') {\n        newState[field.name] = ''\n      } else if (field.type === 'radio') {\n        newState[field.name] = ''\n      } else {\n        newState[field.name] = ''\n      }\n    })\n    setFormState(newState)\n    setFormErrors({})\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setSubmitStatus({})\n    try {\n      if (!validateForm()) throw new Error('Please fill in all required fields correctly.')\n      if (!formData?.fields) throw new Error('Form configuration is missing')\n      if (formData.settings.recaptchaEnabled && !recaptchaRef.current)\n        throw new Error('reCAPTCHA script not loaded yet. Please try again.')\n      const recaptchaToken = recaptchaRef.current ? recaptchaRef.current.getValue() : null\n      const formPayload = new FormData()\n      formPayload.append('Form Id', formData.id || '')\n      if (recaptchaToken) formPayload.append('recaptchaToken', recaptchaToken)\n      Object.entries(formState).forEach(([key, value]) => {\n        const field = formData.fields.find((f) => f.name === key)\n        const payloadKey = field && field.type === 'file' ? key : field?.label || key\n        if (value instanceof File) {\n          if (value && value.name) {\n            formPayload.append(payloadKey, value)\n          }\n        } else if (Array.isArray(value)) {\n          value.forEach((v) => formPayload.append(payloadKey, v))\n        } else if (typeof value === 'string' && value !== '') {\n          formPayload.append(payloadKey, value)\n        }\n      })\n      if (formData.settings) {\n        formPayload.append('settings', JSON.stringify(formData.settings))\n      }\n      const response = await fetch('/api/submit-form', {\n        method: 'POST',\n        body: formPayload,\n      })\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || 'Network response was not ok')\n      }\n      const result = await response.json()\n      if (result.recaptchaSuccess === false)\n        throw new Error('reCAPTCHA verification failed. Please try again.')\n      if (formData.settings.recaptchaEnabled) {\n        recaptchaRef.current?.reset()\n        setFormState((prev) => {\n          // Remove 'recaptcha' from formState without assigning it\n          const rest = {...prev}\n          delete rest.recaptcha\n          return rest\n        })\n      }\n      resetForm()\n      setSubmitStatus({\n        success: true,\n        message: formData.settings.successMessage || 'Form submitted successfully.',\n      })\n      setTimeout(() => {\n        setSubmitStatus({})\n        recaptchaRef.current?.reset()\n      }, 2000)\n    } catch (error) {\n      setSubmitStatus({\n        success: false,\n        message:\n          error instanceof Error\n            ? error.message\n            : 'Error submitting application. Please try again.',\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  if (!formData) return <div>Loading form...</div>\n\n  const renderField = (field: Field) => {\n    const key = `field-${field.name}`\n    const errorClass = formErrors[field.name] ? 'has-error' : ''\n    const commonProps = {\n      id: field.name,\n      name: field.name,\n      required: field.isRequired,\n      onChange: handleChange,\n      className: errorClass,\n      placeholder: field.showPlaceholder ? field.label : field.placeholder,\n      value: (formState[field.name] as string) || '',\n    }\n    const help = field.helpText && (\n      <div className=\"help-tip\">\n        <p>{field.helpText}</p>\n      </div>\n    )\n    const note = field.note && (\n      <div className=\"note-text\">\n        <p>Note:{field.note}</p>\n      </div>\n    )\n    switch (field.type) {\n      case 'textarea':\n        return (\n          <div key={key}>\n            <label htmlFor={field.name}>\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            <textarea {...(commonProps as React.TextareaHTMLAttributes<HTMLTextAreaElement>)} />\n          </div>\n        )\n      case 'select':\n        return (\n          <div key={key}>\n            <label htmlFor={field.name}>\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            <select\n              {...commonProps}\n              value={\n                Array.isArray(formState[field.name])\n                  ? (formState[field.name] as string[])\n                  : (formState[field.name] as string) || ''\n              }\n            >\n              <option value=\"\" disabled>\n                {field.placeholder || `Select ${field.label}`}\n              </option>\n              {field.selectOptions?.map((opt) => (\n                <option key={opt} value={opt}>\n                  {opt}\n                </option>\n              ))}\n            </select>\n            {formErrors[field.name] && (\n              <div className=\"general-error-form\">{formErrors[field.name]}</div>\n            )}\n          </div>\n        )\n      case 'checkbox':\n        return (\n          <div\n            key={key}\n            className={`checkbox-wrapper${formErrors[field.name] ? ' has-error-border' : ''}`}\n          >\n            <label className=\"checkbox-labels\">\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            {field.checkboxOptions?.map((opt) => (\n              <div key={opt} className=\"checkbox-option\">\n                <input\n                  type=\"checkbox\"\n                  name={field.name}\n                  value={opt}\n                  onChange={handleChange}\n                  className={`checkbox`}\n                  id={`${field.name}-${opt}`}\n                  checked={\n                    Array.isArray(formState[field.name])\n                      ? (formState[field.name] as string[]).includes(opt)\n                      : formState[field.name] === opt\n                  }\n                />\n                <label\n                  htmlFor={`${field.name}-${opt}`}\n                  style={{marginLeft: '0.25rem'}}\n                  className=\"checkbox-label\"\n                >\n                  {opt}\n                </label>\n              </div>\n            ))}\n          </div>\n        )\n      case 'radio':\n        return (\n          <div\n            key={key}\n            className={`radio-wrapper${formErrors[field.name] ? ' has-error-border' : ''}`}\n          >\n            <label className=\"radio-label\">\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            {field.radioOptions?.map((opt) => (\n              <div key={opt} className=\"radio-option\">\n                <input\n                  type=\"radio\"\n                  name={field.name}\n                  value={opt}\n                  onChange={handleChange}\n                  className={`radio`}\n                  id={`${field.name}-${opt}`}\n                  checked={(formState[field.name] as string) === opt}\n                />\n                <label htmlFor={`${field.name}-${opt}`} style={{marginLeft: '0.25rem'}}>\n                  {opt}\n                </label>\n              </div>\n            ))}\n          </div>\n        )\n      case 'file':\n        return (\n          <div key={key}>\n            <label htmlFor={field.name}>\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            <input\n              id={field.name}\n              type=\"file\"\n              name={field.name}\n              placeholder={field.showPlaceholder ? field.label : field.placeholder}\n              required={field.isRequired}\n              onChange={handleFileChange}\n              className={formErrors[field.name] ? 'has-error' : ''}\n              key={formState[field.name] instanceof File ? 'file-filled' : 'file-empty'}\n            />\n            {formErrors[field.name] && (\n              <div className=\"general-error-form\">{formErrors[field.name]}</div>\n            )}\n          </div>\n        )\n      default:\n        return (\n          <div key={key}>\n            <label htmlFor={field.name}>\n              {field.label} {field.isRequired && <span className=\"required-asterisk\">*</span>}\n            </label>\n            {help}\n            {note}\n            <input {...commonProps} type={field.type} />\n          </div>\n        )\n    }\n  }\n\n  return (\n    <form id={formData.id} className={formData.class || ''} onSubmit={handleSubmit}>\n      {formData.showtitle && <h2 style={{textAlign: 'center', color: 'red'}}>{formData.title}</h2>}\n      {formData.fields.map(renderField)}\n      {formData.settings && formData.settings.recaptchaEnabled && (\n        <ReCAPTCHA\n          sitekey={formData.settings.recaptchaSiteKey}\n          ref={recaptchaRef}\n          onChange={onReCAPTCHAChange}\n        />\n      )}\n      <button type=\"submit\" disabled={isSubmitting}>\n        {isSubmitting ? 'Submitting...' : formData.submitButtonText || 'Apply Now'}\n      </button>\n      {submitStatus.message && (\n        <div\n          className={` ${submitStatus.success ? 'resume-submit-success' : 'general-error-form'}`}\n          role=\"alert\"\n        >\n          {submitStatus.message}\n        </div>\n      )}\n      <style>\n        {`\n          form {\n            max-width: 600px;\n            margin: 2rem auto;\n            padding: 2rem;\n            background: #f9fafb;\n            border: 1px solid #e5e7eb;\n            border-radius: 8px;\n            font-family: system-ui, sans-serif;\n          }\n          form h2 {\n            margin-bottom: 1.5rem;\n            font-size: 1.5rem;\n            color: #111827;\n          }\n          form>div {\n            margin-bottom: 1.25rem;\n            position: relative;\n          }\n          label {\n            display: block;\n            margin-bottom: 0.5rem;\n            font-weight: 600;\n            color: #374151;\n          }\n          .required-asterisk { color: red; }\n          input, textarea, select {\n            width: 100%;\n            padding: 0.75rem;\n            font-size: 1rem;\n            border: 1px solid #d1d5db;\n            border-radius: 4px;\n            background-color: #fff;\n            color: #111827;\n            transition: border-color 0.2s;\n          }\n          input:focus, textarea:focus, select:focus {\n            outline: none;\n            border-color: #2563eb;\n            box-shadow: 0 0 0 1px #2563eb33;\n          }\n          textarea {\n            resize: vertical;\n            min-height: 120px;\n          }\n          button[type='submit'] {\n            background-color: #2563eb;\n            color: white;\n            padding: 0.75rem 1.25rem;\n            font-size: 1rem;\n            font-weight: 600;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n          }\n          button[type='submit']:hover { background-color: #1d4ed8; }\n          p { font-size: 1rem; color: #16a34a; margin-top: 1rem; }\n          input[type=\"checkbox\"].has-error-border {\n            outline: 1px solid red;\n            outline-offset: 1px;\n            padding: 10px;\n          }\n          input.has-error, textarea.has-error  { border: 1px solid #ff0000 !important; }\n          .radio, .checkbox {\n            margin-right: 0.4rem;\n            accent-color: #2563eb;\n            width: 16px;\n            height: 16px;\n            cursor: pointer;\n          }\n          .radio-option, .checkbox-option { display: flex; gap: 0.5rem; }\n          .has-error-border { border: 1px solid red; padding: 10px; }\n          .general-error-form { color: red; margin-top: 1rem; }\n          .resume-submit-success { color: green; margin-top: 1rem; }\n          .help-tip {\n            position: absolute;\n            top: 0;\n            right: 0;\n            text-align: center;\n            background-color: #595959;\n            border-radius: 50%;\n            width: 18px;\n            height: 18px;\n            font-size: 12px;\n            line-height: 21px;\n            cursor: default\n          }\n          .help-tip:before {\n            content: '?';\n            font-weight: 700;\n            color: #fff\n          }\n          .help-tip:hover p {\n            display: block;\n            transform-origin: 100% 0%;\n            -webkit-animation: .3s ease-in-out fadeIn;\n            animation: .3s ease-in-out fadeIn;\n            z-index: 999\n          }\n          .help-tip p {\n            display: none;\n            background-color: #1e2021;\n            padding: 15px 10px;\n            width: 290px;\n            position: absolute;\n            border-radius: 3px;\n            box-shadow: 1px 1px 1px rgba(0, 0, 0, .2);\n            right: -4px;\n            color: #fff;\n            font-size: 13px;\n            line-height: 1.4;\n            word-wrap: break-word\n          }\n          .help-tip p:before {\n            position: absolute;\n            content: '';\n            width: 0;\n            height: 0;\n            border: 6px solid transparent;\n            border-bottom-color: #1e2021;\n            right: 10px;\n            top: -12px\n          }\n          .help-tip p:after {\n            width: 100%;\n            height: 40px;\n            content: '';\n            position: absolute;\n            top: -40px;\n            left: 0\n          }\n          .help-tip p a {\n            color: #fff;\n            font-size: inherit;\n            text-decoration: none;\n            pointer-events: none\n          }\n          .help-tip p{text-align: left}\n          .note-text p {\n            margin-bottom: 0.5rem;\n            font-size: 0.8rem;\n            font-style: italic;\n            color:rgb(77, 78, 80)!important;\n          }\n        `}\n      </style>\n    </form>\n  )\n}\n","import {definePlugin} from 'sanity'\n\nimport {contactFormSchema} from './schemas/contactForm'\nimport {formGeneralSettings} from './schemas/formGeneralSettings'\n\nconst SINGLETON_ID = 'formGeneralSettings'\n\nexport const contactFormPlugin = definePlugin(() => {\n  return {\n    name: 'sanity-plugin-contact-form',\n    schema: {\n      types: [contactFormSchema, formGeneralSettings],\n    },\n    document: {\n      newDocumentOptions: (prev) => prev.filter((template) => template.templateId !== SINGLETON_ID),\n    },\n  }\n})\n\nexport {ContactForm} from './components/ContactForm'\n"],"names":[],"mappings":";;;;AACO,MAAM,oBAAoB;AAAA,EAC/B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,IACN;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,cAAc;AAAA,IAAA;AAAA,IAEhB;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS;AAAA,QACP,QAAQ;AAAA,MAAA;AAAA,MAEV,YAAY,CAAC,SAAiC,KAAK,SAAA;AAAA,IAAS;AAAA,IAE9D;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,IAAI;AAAA,QACF;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,YACN;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,YAAY,CAAC,SAAiC,KAAK,SAAA;AAAA,YAAS;AAAA,YAE9D;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,SAAS;AAAA,gBACP,MAAM;AAAA,kBACJ,EAAC,OAAO,QAAQ,OAAO,OAAA;AAAA,kBACvB,EAAC,OAAO,SAAS,OAAO,QAAA;AAAA,kBACxB,EAAC,OAAO,OAAO,OAAO,MAAA;AAAA,kBACtB,EAAC,OAAO,YAAY,OAAO,WAAA;AAAA,kBAC3B,EAAC,OAAO,OAAO,OAAO,MAAA;AAAA,kBACtB,EAAC,OAAO,eAAe,OAAO,OAAA;AAAA,kBAC9B,EAAC,OAAO,YAAY,OAAO,WAAA;AAAA,kBAC3B,EAAC,OAAO,mBAAmB,OAAO,SAAA;AAAA,kBAClC,EAAC,OAAO,iBAAiB,OAAO,QAAA;AAAA,gBAAO;AAAA,gBAEzC,QAAQ;AAAA,cAAA;AAAA,cAEV,cAAc;AAAA,YAAA;AAAA,YAEhB;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,cAAc;AAAA,cACd,QAAQ,CAAC,EAAC,OAAA,MACR,QAAQ,SAAS,cACjB,QAAQ,SAAS,WACjB,QAAQ,SAAS,UACjB,QAAQ,SAAS;AAAA,YAAA;AAAA,YAErB;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,QAAQ,CAAC,EAAC,OAAA,MAAmD,QAAQ;AAAA,YAAA;AAAA,YAEvE;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,YAAY,CAAC,SAAiC,KAAK,SAAA;AAAA,YAAS;AAAA,YAE9D;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,IAAI,CAAC,EAAC,MAAM,UAAS;AAAA,cACrB,aAAa;AAAA,cACb,QAAQ,CAAC,EAAC,OAAA,MAAwC,QAAQ,SAAS;AAAA,cACnE,YAAY,CAAC,SAQX,KAAK;AAAA,gBACH,CAAC,SAA+B,YAC1B,QAAQ,QAAQ,SAAS,aAAa,CAAC,WAAW,QAAQ,WAAW,KAChE,sDAEF;AAAA,cAAA;AAAA,YAEX;AAAA,YAEJ;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,IAAI,CAAC,EAAC,MAAM,UAAS;AAAA,cACrB,aAAa;AAAA,cACb,QAAQ,CAAC,EAAC,OAAA,MAAwC,QAAQ,SAAS;AAAA,cACnE,YAAY,CAAC,SAQX,KAAK;AAAA,gBACH,CAAC,SAA+B,YAC1B,QAAQ,QAAQ,SAAS,YAAY,CAAC,WAAW,QAAQ,WAAW,KAC/D,qDAEF;AAAA,cAAA;AAAA,YAEX;AAAA,YAEJ;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,IAAI,CAAC,EAAC,MAAM,UAAS;AAAA,cACrB,aAAa;AAAA,cACb,QAAQ,CAAC,EAAC,OAAA,MAAwC,QAAQ,SAAS;AAAA,cACnE,YAAY,CAAC,SAQX,KAAK;AAAA,gBACH,CAAC,SAA+B,YAC1B,QAAQ,QAAQ,SAAS,eAAe,CAAC,WAAW,QAAQ,WAAW,KAClE,wDAEF;AAAA,cAAA;AAAA,YAEX;AAAA,YAEJ;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,YAAA;AAAA,YAET;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,YAAA;AAAA,YAET;AAAA,cACE,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP,cAAc;AAAA,YAAA;AAAA,UAChB;AAAA,QACF;AAAA,MACF;AAAA,MAEF,YAAY,CAAC,SAAiC,KAAK,SAAA;AAAA,IAAS;AAAA,IAE9D;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,cAAc;AAAA,IAAA;AAAA,EAChB;AAEJ,GC5La,sBAAsB,WAAW;AAAA,EAC5C,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,QAAQ;AAAA,IACN;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,YAAY,CAAC,SAAS,KAAK,SAAA,EAAW,MAAA;AAAA,IAAM;AAAA;AAAA,IAG9C;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,YAAY,CAAC,SAAS,KAAK,SAAA,EAAW,MAAA;AAAA,IAAM;AAAA,IAE9C;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,YAAY,CAAC,SAAS,KAAK,SAAA;AAAA,IAAS;AAAA,IAEtC;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,YAAY,CAAC,SAAS,KAAK,SAAA;AAAA,MAC3B,aAAa;AAAA,MACb,cAAc;AAAA,IAAA;AAAA,IAEhB;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,cAAc;AAAA,MACd,YAAY,CAAC,SAAS,KAAK,SAAA;AAAA,IAAS;AAAA,IAEtC;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,cACE;AAAA,IAAA;AAAA,IAEJ;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,cAAc;AAAA,IAAA;AAAA,IAEhB;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,QAAQ,CAAC,EAAC,eAAc,CAAC,UAAU;AAAA,MACnC,YAAY,CAAC,SACX,KAAK,OAAO,CAAC,OAAO,YAED,QAAQ,UAGX,oBAAoB,CAAC,QAC1B,mDAGF,EACR;AAAA,IAAA;AAAA,IAEL;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,QAAQ,CAAC,EAAC,eAAc,CAAC,UAAU;AAAA,MACnC,YAAY,CAAC,SACX,KAAK,OAAO,CAAC,OAAO,YAED,QAAQ,UAGX,oBAAoB,CAAC,QAC1B,qDAGF,EACR;AAAA,IAAA;AAAA,EACL;AAAA,EAEF,SAAS;AAAA,IACP,UAAU;AACR,aAAO;AAAA,QACL,OAAO;AAAA,MAAA;AAAA,IACT;AAAA,EACF;AAEJ,CAAC,GCtEY,cAA0C,CAAC,EAAC,eAAc;AACrE,QAAM,CAAC,WAAW,YAAY,IAAI,SAA6D,CAAA,CAAE,GAC3F,CAAC,YAAY,aAAa,IAAI,SAAiC,CAAA,CAAE,GACjE,CAAC,cAAc,eAAe,IAAI,SAAS,EAAK,GAChD,CAAC,cAAc,eAAe,IAAI,SAAgD,CAAA,CAAE,GACpF,eAAe,OAAkB,IAAI,GAErC,oBAAoB,CAAC,gBAA+B;AACnD,mBACL,aAAa,CAAC,UAAU,EAAC,GAAG,MAAM,WAAW,YAAA,EAAa;AAAA,EAAA,GAGtD,eAAe,CACnB,MACG;AACH,UAAM,EAAC,MAAM,OAAO,SAAS,QAAA,IAAW,EAAE;AAC1C,QAAI;AACJ,UAAM,YAAa,EAAE,OAA4B;AAC7C,kBAAc,aACZ,MAAM,QAAQ,UAAU,IAAI,CAAC,IAC/B,aAAa,UACT,CAAC,GAAI,UAAU,IAAI,GAAgB,KAAK,IACvC,UAAU,IAAI,EAAe,OAAO,CAAC,MAAM,MAAM,KAAK,IAE3D,aAAa,UAAU,QAAQ,KAExB,cAAc,oBACvB,aAAa,MAAM,KAAK,OAAO,EAC5B,OAAO,CAAC,QAAQ,IAAI,QAAQ,EAC5B,IAAI,CAAC,QAAQ,IAAI,KAAK,IAEzB,aAAa,OAIf,aAAa,CAAC,UAAU,EAAC,GAAG,MAAM,CAAC,IAAI,GAAG,aAAY;AAAA,EAAA,GAGlD,eAAe,MAAM;AACzB,UAAM,SAAiC,CAAA;AACvC,QAAI,CAAC,UAAU,OAAQ,QAAO;AAC9B,QAAI,UAAU;AACd,WAAA,SAAS,OAAO,QAAQ,CAAC,UAAU;AACjC,YAAM,aAAa,UAAU,MAAM,IAAI,GACjC,UAEJ,cAAe,QACd,OAAO,cAAe,YAAY,WAAW,WAAW,MACxD,MAAM,QAAQ,UAAU,KAAK,WAAW,WAAW;AAClD,YAAM,eACJ,MAAM,SAAS,UACb,CAAC,cAAc,EAAE,sBAAsB,WACzC,OAAO,MAAM,IAAI,IAAI,wBACrB,UAAU,MAEH,YACT,OAAO,MAAM,IAAI,IAAI,qBAAqB,MAAM,OAAO,aAAa,KACpE,UAAU,KAER,MAAM,SAAS,cAAc,CAAC,eAChC,OAAO,MAAM,IAAI,IAAI,wBACrB,UAAU,KAER,MAAM,SAAS,WAAW,CAAC,eAC7B,OAAO,MAAM,IAAI,IAAI,2BACrB,UAAU,MAGV,CAAC,WAAW,eACV,MAAM,SAAS,WAAW,CAAC,6BAA6B,KAAK,WAAW,UAAU,KACpF,OAAO,MAAM,IAAI,IAAI,sCACrB,UAAU,MACD,MAAM,SAAS,SAAS,CAAC,qBAAqB,KAAK,WAAW,SAAA,CAAU,KACjF,OAAO,MAAM,IAAI,IAAI,4BACrB,UAAU,MACD,MAAM,SAAS,SAAS,CAAC,qBAAqB,KAAK,WAAW,SAAA,CAAU,MACjF,OAAO,MAAM,IAAI,IAAI,qCACrB,UAAU;AAAA,IAAA,CAGf,GACD,cAAc,MAAM,GACb;AAAA,EAAA,GAEH,mBAAmB,CAAC,MAA2C;AACnE,UAAM,EAAC,MAAM,UAAS,EAAE,QAClB,OAAO,QAAQ,CAAC;AACtB,iBAAa,CAAC,UAAU;AAAA,MACtB,GAAG;AAAA,MACH,CAAC,IAAI,GAAG,QAAQ;AAAA,IAAA,EAChB,GACF,cAAc,CAAC,UAAU,EAAC,GAAG,MAAM,CAAC,IAAI,GAAG,GAAA,EAAI;AAAA,EAAA,GAG3C,YAAY,MAAM;AACtB,UAAM,WAA+D,CAAA;AACrE,aAAS,OAAO,QAAQ,CAAC,UAAU;AAC7B,YAAM,SAAS,aACjB,SAAS,MAAM,IAAI,IACjB,MAAM,iBAAiB,UAAU,MAAM,gBAAgB,SAAS,IAAI,KAAK,KAClE,MAAM,SAAS,WACxB,SAAS,MAAM,IAAI,IAAI,CAAA,IAIvB,SAAS,MAAM,IAAI,IAAI;AAAA,IAAA,CAI1B,GACD,aAAa,QAAQ,GACrB,cAAc,CAAA,CAAE;AAAA,EAAA,GAGZ,eAAe,OAAO,MAAuB;AACjD,MAAE,kBACF,gBAAgB,EAAI,GACpB,gBAAgB,EAAE;AAClB,QAAI;AACF,UAAI,CAAC,aAAA,EAAgB,OAAM,IAAI,MAAM,+CAA+C;AACpF,UAAI,CAAC,UAAU,OAAQ,OAAM,IAAI,MAAM,+BAA+B;AACtE,UAAI,SAAS,SAAS,oBAAoB,CAAC,aAAa;AACtD,cAAM,IAAI,MAAM,oDAAoD;AACtE,YAAM,iBAAiB,aAAa,UAAU,aAAa,QAAQ,aAAa,MAC1E,cAAc,IAAI,SAAA;AACxB,kBAAY,OAAO,WAAW,SAAS,MAAM,EAAE,GAC3C,kBAAgB,YAAY,OAAO,kBAAkB,cAAc,GACvE,OAAO,QAAQ,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAClD,cAAM,QAAQ,SAAS,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,GAAG,GAClD,aAAa,SAAS,MAAM,SAAS,SAAS,MAAM,OAAO,SAAS;AACtE,yBAAiB,OACf,SAAS,MAAM,QACjB,YAAY,OAAO,YAAY,KAAK,IAE7B,MAAM,QAAQ,KAAK,IAC5B,MAAM,QAAQ,CAAC,MAAM,YAAY,OAAO,YAAY,CAAC,CAAC,IAC7C,OAAO,SAAU,YAAY,UAAU,MAChD,YAAY,OAAO,YAAY,KAAK;AAAA,MAAA,CAEvC,GACG,SAAS,YACX,YAAY,OAAO,YAAY,KAAK,UAAU,SAAS,QAAQ,CAAC;AAElE,YAAM,WAAW,MAAM,MAAM,oBAAoB;AAAA,QAC/C,QAAQ;AAAA,QACR,MAAM;AAAA,MAAA,CACP;AACD,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,YAAY,MAAM,SAAS,KAAA;AACjC,cAAM,IAAI,MAAM,UAAU,WAAW,6BAA6B;AAAA,MAAA;AAGpE,WADe,MAAM,SAAS,KAAA,GACnB,qBAAqB;AAC9B,cAAM,IAAI,MAAM,kDAAkD;AAChE,eAAS,SAAS,qBACpB,aAAa,SAAS,MAAA,GACtB,aAAa,CAAC,SAAS;AAErB,cAAM,OAAO,EAAC,GAAG,KAAA;AACjB,eAAA,OAAO,KAAK,WACL;AAAA,MAAA,CACR,IAEH,UAAA,GACA,gBAAgB;AAAA,QACd,SAAS;AAAA,QACT,SAAS,SAAS,SAAS,kBAAkB;AAAA,MAAA,CAC9C,GACD,WAAW,MAAM;AACf,wBAAgB,CAAA,CAAE,GAClB,aAAa,SAAS,MAAA;AAAA,MAAM,GAC3B,GAAI;AAAA,IAAA,SACA,OAAO;AACd,sBAAgB;AAAA,QACd,SAAS;AAAA,QACT,SACE,iBAAiB,QACb,MAAM,UACN;AAAA,MAAA,CACP;AAAA,IAAA,UACH;AACE,sBAAgB,EAAK;AAAA,IAAA;AAAA,EACvB;AAGF,MAAI,CAAC,SAAU,QAAO,oBAAC,SAAI,UAAA,mBAAe;AAE1C,QAAM,cAAc,CAAC,UAAiB;AACpC,UAAM,MAAM,SAAS,MAAM,IAAI,IACzB,aAAa,WAAW,MAAM,IAAI,IAAI,cAAc,IACpD,cAAc;AAAA,MAClB,IAAI,MAAM;AAAA,MACV,MAAM,MAAM;AAAA,MACZ,UAAU,MAAM;AAAA,MAChB,UAAU;AAAA,MACV,WAAW;AAAA,MACX,aAAa,MAAM,kBAAkB,MAAM,QAAQ,MAAM;AAAA,MACzD,OAAQ,UAAU,MAAM,IAAI,KAAgB;AAAA,IAAA,GAExC,OAAO,MAAM,gCAChB,OAAA,EAAI,WAAU,YACb,UAAA,oBAAC,KAAA,EAAG,UAAA,MAAM,UAAS,EAAA,CACrB,GAEI,OAAO,MAAM,4BAChB,OAAA,EAAI,WAAU,aACb,UAAA,qBAAC,KAAA,EAAE,UAAA;AAAA,MAAA;AAAA,MAAM,MAAM;AAAA,IAAA,EAAA,CAAK,EAAA,CACtB;AAEF,YAAQ,MAAM,MAAA;AAAA,MACZ,KAAK;AACH,oCACG,OAAA,EACC,UAAA;AAAA,UAAA,qBAAC,SAAA,EAAM,SAAS,MAAM,MACnB,UAAA;AAAA,YAAA,MAAM;AAAA,YAAM;AAAA,YAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,UAAA,GAC1E;AAAA,UACC;AAAA,UACA;AAAA,UACD,oBAAC,YAAA,EAAU,GAAI,YAAA,CAAmE;AAAA,QAAA,EAAA,GAN1E,GAOV;AAAA,MAEJ,KAAK;AACH,oCACG,OAAA,EACC,UAAA;AAAA,UAAA,qBAAC,SAAA,EAAM,SAAS,MAAM,MACnB,UAAA;AAAA,YAAA,MAAM;AAAA,YAAM;AAAA,YAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,UAAA,GAC1E;AAAA,UACC;AAAA,UACA;AAAA,UACD;AAAA,YAAC;AAAA,YAAA;AAAA,cACE,GAAG;AAAA,cACJ,OACE,MAAM,QAAQ,UAAU,MAAM,IAAI,CAAC,IAC9B,UAAU,MAAM,IAAI,IACpB,UAAU,MAAM,IAAI,KAAgB;AAAA,cAG3C,UAAA;AAAA,gBAAA,oBAAC,UAAA,EAAO,OAAM,IAAG,UAAQ,IACtB,gBAAM,eAAe,UAAU,MAAM,KAAK,GAAA,CAC7C;AAAA,gBACC,MAAM,eAAe,IAAI,CAAC,QACzB,oBAAC,UAAA,EAAiB,OAAO,KACtB,UAAA,IAAA,GADU,GAEb,CACD;AAAA,cAAA;AAAA,YAAA;AAAA,UAAA;AAAA,UAEF,WAAW,MAAM,IAAI,KACpB,oBAAC,OAAA,EAAI,WAAU,sBAAsB,UAAA,WAAW,MAAM,IAAI,EAAA,CAAE;AAAA,QAAA,EAAA,GAxBtD,GA0BV;AAAA,MAEJ,KAAK;AACH,eACE;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAW,mBAAmB,WAAW,MAAM,IAAI,IAAI,sBAAsB,EAAE;AAAA,YAE/E,UAAA;AAAA,cAAA,qBAAC,SAAA,EAAM,WAAU,mBACd,UAAA;AAAA,gBAAA,MAAM;AAAA,gBAAM;AAAA,gBAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,cAAA,GAC1E;AAAA,cACC;AAAA,cACA;AAAA,cACA,MAAM,iBAAiB,IAAI,CAAC,QAC3B,qBAAC,OAAA,EAAc,WAAU,mBACvB,UAAA;AAAA,gBAAA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,MAAK;AAAA,oBACL,MAAM,MAAM;AAAA,oBACZ,OAAO;AAAA,oBACP,UAAU;AAAA,oBACV,WAAW;AAAA,oBACX,IAAI,GAAG,MAAM,IAAI,IAAI,GAAG;AAAA,oBACxB,SACE,MAAM,QAAQ,UAAU,MAAM,IAAI,CAAC,IAC9B,UAAU,MAAM,IAAI,EAAe,SAAS,GAAG,IAChD,UAAU,MAAM,IAAI,MAAM;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAGlC;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,SAAS,GAAG,MAAM,IAAI,IAAI,GAAG;AAAA,oBAC7B,OAAO,EAAC,YAAY,UAAA;AAAA,oBACpB,WAAU;AAAA,oBAET,UAAA;AAAA,kBAAA;AAAA,gBAAA;AAAA,cACH,EAAA,GApBQ,GAqBV,CACD;AAAA,YAAA;AAAA,UAAA;AAAA,UA/BI;AAAA,QAAA;AAAA,MAkCX,KAAK;AACH,eACE;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAW,gBAAgB,WAAW,MAAM,IAAI,IAAI,sBAAsB,EAAE;AAAA,YAE5E,UAAA;AAAA,cAAA,qBAAC,SAAA,EAAM,WAAU,eACd,UAAA;AAAA,gBAAA,MAAM;AAAA,gBAAM;AAAA,gBAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,cAAA,GAC1E;AAAA,cACC;AAAA,cACA;AAAA,cACA,MAAM,cAAc,IAAI,CAAC,QACxB,qBAAC,OAAA,EAAc,WAAU,gBACvB,UAAA;AAAA,gBAAA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,MAAK;AAAA,oBACL,MAAM,MAAM;AAAA,oBACZ,OAAO;AAAA,oBACP,UAAU;AAAA,oBACV,WAAW;AAAA,oBACX,IAAI,GAAG,MAAM,IAAI,IAAI,GAAG;AAAA,oBACxB,SAAU,UAAU,MAAM,IAAI,MAAiB;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAEjD,oBAAC,SAAA,EAAM,SAAS,GAAG,MAAM,IAAI,IAAI,GAAG,IAAI,OAAO,EAAC,YAAY,UAAA,GACzD,UAAA,IAAA,CACH;AAAA,cAAA,EAAA,GAZQ,GAaV,CACD;AAAA,YAAA;AAAA,UAAA;AAAA,UAvBI;AAAA,QAAA;AAAA,MA0BX,KAAK;AACH,oCACG,OAAA,EACC,UAAA;AAAA,UAAA,qBAAC,SAAA,EAAM,SAAS,MAAM,MACnB,UAAA;AAAA,YAAA,MAAM;AAAA,YAAM;AAAA,YAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,UAAA,GAC1E;AAAA,UACC;AAAA,UACA;AAAA,UACD;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,IAAI,MAAM;AAAA,cACV,MAAK;AAAA,cACL,MAAM,MAAM;AAAA,cACZ,aAAa,MAAM,kBAAkB,MAAM,QAAQ,MAAM;AAAA,cACzD,UAAU,MAAM;AAAA,cAChB,UAAU;AAAA,cACV,WAAW,WAAW,MAAM,IAAI,IAAI,cAAc;AAAA,YAAA;AAAA,YAC7C,UAAU,MAAM,IAAI,aAAa,OAAO,gBAAgB;AAAA,UAAA;AAAA,UAE9D,WAAW,MAAM,IAAI,KACpB,oBAAC,OAAA,EAAI,WAAU,sBAAsB,UAAA,WAAW,MAAM,IAAI,EAAA,CAAE;AAAA,QAAA,EAAA,GAjBtD,GAmBV;AAAA,MAEJ;AACE,oCACG,OAAA,EACC,UAAA;AAAA,UAAA,qBAAC,SAAA,EAAM,SAAS,MAAM,MACnB,UAAA;AAAA,YAAA,MAAM;AAAA,YAAM;AAAA,YAAE,MAAM,cAAc,oBAAC,QAAA,EAAK,WAAU,qBAAoB,UAAA,IAAA,CAAC;AAAA,UAAA,GAC1E;AAAA,UACC;AAAA,UACA;AAAA,8BACA,SAAA,EAAO,GAAG,aAAa,MAAM,MAAM,KAAA,CAAM;AAAA,QAAA,EAAA,GANlC,GAOV;AAAA,IAAA;AAAA,EAEN;AAGF,SACE,qBAAC,QAAA,EAAK,IAAI,SAAS,IAAI,WAAW,SAAS,SAAS,IAAI,UAAU,cAC/D,UAAA;AAAA,IAAA,SAAS,aAAa,oBAAC,MAAA,EAAG,OAAO,EAAC,WAAW,UAAU,OAAO,MAAA,GAAS,UAAA,SAAS,MAAA,CAAM;AAAA,IACtF,SAAS,OAAO,IAAI,WAAW;AAAA,IAC/B,SAAS,YAAY,SAAS,SAAS,oBACtC;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,SAAS,SAAS,SAAS;AAAA,QAC3B,KAAK;AAAA,QACL,UAAU;AAAA,MAAA;AAAA,IAAA;AAAA,IAGd,oBAAC,UAAA,EAAO,MAAK,UAAS,UAAU,cAC7B,UAAA,eAAe,kBAAkB,SAAS,oBAAoB,YAAA,CACjE;AAAA,IACC,aAAa,WACZ;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW,IAAI,aAAa,UAAU,0BAA0B,oBAAoB;AAAA,QACpF,MAAK;AAAA,QAEJ,UAAA,aAAa;AAAA,MAAA;AAAA,IAAA;AAAA,wBAGjkJH;AAAA,EAAA,GACF;AAEJ,GC/iBM,eAAe,uBAER,oBAAoB,aAAa,OACrC;AAAA,EACL,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,OAAO,CAAC,mBAAmB,mBAAmB;AAAA,EAAA;AAAA,EAEhD,UAAU;AAAA,IACR,oBAAoB,CAAC,SAAS,KAAK,OAAO,CAAC,aAAa,SAAS,eAAe,YAAY;AAAA,EAAA;AAEhG,EACD;"}